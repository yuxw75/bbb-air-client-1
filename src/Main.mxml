<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:top="org.bigbluebutton.top.view.*"
			   xmlns:navigation="org.bigbluebutton.view.navigation.*"
			   xmlns:presentation="org.bigbluebutton.view.navigation.pages.presentation.*"
			   xmlns:ui="org.bigbluebutton.view.ui.*"
			   xmlns:common="org.bigbluebutton.view.navigation.pages.common.*"
			   xmlns:loading="org.bigbluebutton.view.ui.loading.*"
			   styleName="mainshellStyle"
			   preinitialize="preinitializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)"
			   applicationComplete="applicationCompleteHandler(event)"
			   runtimeDPIProvider="CustomRuntimeDPIProvider"
			   xmlns:micbutton="org.bigbluebutton.view.ui.micbutton.*"
			   xmlns:videobutton="org.bigbluebutton.view.ui.videobutton.*">
	<fx:Style source="Default.css" />
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			import com.juankpro.ane.localnotif.Notification;
			import com.juankpro.ane.localnotif.NotificationManager;
			import flash.system.Capabilities;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.resources.ResourceManager;
			import org.bigbluebutton.AppConfig;
			import org.bigbluebutton.core.util.OrientationCalculator;
			import org.bigbluebutton.core.view.NoTabView;
			import org.bigbluebutton.model.UserSession;
			import org.bigbluebutton.util.BigBlueButtonLoggerFactory;
			import org.bigbluebutton.view.navigation.PagesNavigatorConfig;
			import org.bigbluebutton.view.navigation.pages.PagesENUM;
			import org.bigbluebutton.view.navigation.pages.TransitionAnimationENUM;
			import org.bigbluebutton.view.navigation.pages.audiosettings.AudioSettingsConfig;
			import org.bigbluebutton.view.navigation.pages.camerasettings.CameraSettingsConfig;
			import org.bigbluebutton.view.navigation.pages.chat.ChatConfig;
			import org.bigbluebutton.view.navigation.pages.chatrooms.ChatRoomsConfig;
			import org.bigbluebutton.view.navigation.pages.common.MenuButtonsConfig;
			import org.bigbluebutton.view.navigation.pages.deskshare.DeskshareConfig;
			import org.bigbluebutton.view.navigation.pages.disconnect.DisconnectPageConfig;
			import org.bigbluebutton.view.navigation.pages.exit.ExitPageConfig;
			import org.bigbluebutton.view.navigation.pages.guest.GuestPageConfig;
			import org.bigbluebutton.view.navigation.pages.locksettings.LockSettingsConfig;
			import org.bigbluebutton.view.navigation.pages.login.LoginPageConfig;
			import org.bigbluebutton.view.navigation.pages.login.openroom.OpenRoomConfig;
			import org.bigbluebutton.view.navigation.pages.login.openroom.recentrooms.RecentRoomsConfig;
			import org.bigbluebutton.view.navigation.pages.participants.ParticipantsConfig;
			import org.bigbluebutton.view.navigation.pages.presentation.PresentationConfig;
			import org.bigbluebutton.view.navigation.pages.profile.ProfileConfig;
			import org.bigbluebutton.view.navigation.pages.selectparticipant.SelectParticipantConfig;
			import org.bigbluebutton.view.navigation.pages.splitchat.SplitChatConfig;
			import org.bigbluebutton.view.navigation.pages.splitparticipants.SplitParticipantsConfig;
			import org.bigbluebutton.view.navigation.pages.splitsettings.SplitSettingsConfig;
			import org.bigbluebutton.view.navigation.pages.status.StatusConfig;
			import org.bigbluebutton.view.navigation.pages.userdetails.UserDetaisConfig;
			import org.bigbluebutton.view.navigation.pages.videochat.VideoChatConfig;
			import org.bigbluebutton.view.navigation.pages.whiteboard.WhiteboardConfig;
			import org.bigbluebutton.view.ui.NavigationButtonConfig;
			import org.bigbluebutton.view.ui.RecordingStatusConfig;
			import org.bigbluebutton.view.ui.SwapCameraConfig;
			import org.bigbluebutton.view.ui.loading.LoadingScreenConfig;
			import org.bigbluebutton.view.ui.micbutton.MicButtonConfig;
			import org.bigbluebutton.view.ui.videobutton.VideoButtonConfig;
			import org.osmf.logging.Log;
			import org.osmf.logging.Logger;
			import robotlegs.bender.bundles.mvcs.MVCSBundle;
			import robotlegs.bender.extensions.contextView.ContextView;
			import robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
			import robotlegs.bender.framework.api.IContext;
			import robotlegs.bender.framework.api.LogLevel;
			import robotlegs.bender.framework.impl.Context;
			
			protected var context:IContext;
			
			private var _orientationCalc:OrientationCalculator;
			
			public var currentOrientation:String;
			
			protected function preinitializeHandler(event:FlexEvent):void {
				setupContext();
				setupLogger();
				resizeForSoftKeyboard = true;
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);
				ResourceManager.getInstance().localeChain = LocaleUtil.sortLanguagesByPreference(['en_US', 'zh_CN'], Capabilities.languages, "zh_CN");
			}
			
			/*
			   public function onInvokeEvent(invocation:InvokeEvent):void
			   {
			   var traceString:String = "";
			
			   var arguments:Array = invocation.arguments;
			   var currentDir:File = invocation.currentDirectory;
			   var reason:String = invocation.reason;
			   traceString += "-----InvokeEvent.INVOKE----\n";
			   traceString += "arguments: "+arguments.toString()+"\n\n";
			   traceString += "currentDir: "+currentDir+"\n\n";
			   traceString += "reason: "+reason+"\n\n";
			
			   var url:String = arguments.toString().replace('bigbluebutton://', 'http://');
			
			   traceString += "url: "+url+"\n\n";
			
			   traceText.text += traceString;
			   }
			 */
			/**
			 * Sets up the Robotlegs context.
			 */
			private function setupContext():void {
				context = new Context()
					.install(MVCSBundle, SignalCommandMapExtension)
					.configure(AppConfig)
					
					.configure(LoadingScreenConfig)
					.configure(PagesNavigatorConfig)
					.configure(PresentationConfig)
					.configure(LoginPageConfig)
					.configure(LockSettingsConfig)
					.configure(ChatConfig)
					.configure(ChatRoomsConfig)
					.configure(VideoChatConfig)
					.configure(ProfileConfig)
					.configure(SplitSettingsConfig)
					.configure(SplitParticipantsConfig)
					.configure(SplitChatConfig)
					.configure(StatusConfig)
					.configure(RecentRoomsConfig)
					.configure(OpenRoomConfig)
					.configure(UserDetaisConfig)
					.configure(ParticipantsConfig)
					.configure(SelectParticipantConfig)
					.configure(MicButtonConfig)
					.configure(VideoButtonConfig)
					.configure(NavigationButtonConfig)
					.configure(SwapCameraConfig)
					.configure(ExitPageConfig)
					.configure(DisconnectPageConfig)
					.configure(GuestPageConfig)
					.configure(DeskshareConfig)
					.configure(RecordingStatusConfig)
					.configure(CameraSettingsConfig)
					.configure(AudioSettingsConfig)
					.configure(MenuButtonsConfig)
					.configure(WhiteboardConfig)
					.configure(new ContextView(this));
				// If you wish to change the log level then uncomment the line below and set 
				// the logLevel to the value you desire. The default logLevel is DEBUG, which 
				// is set in the MVCSBundle. The default log level traces out the framework 
				// actions, which can assist in learning Robotlegs.
				setLogLevel();
			}
			
			/**
			 * Sets the logLevel for the robotegs context.
			 */
			private function setLogLevel():void {
				// setting the logLevel to WARN means that robotlegs
				// will also notify us about ERROR & FATAL.
				context.logLevel = LogLevel.WARN;
			}
			
			private function setupLogger():void {
				Log.loggerFactory = new BigBlueButtonLoggerFactory();
				var logger:Logger = Log.getLogger("org.bigbluebutton");
				logger.info("Logger on");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
			}
			
			protected function applicationCompleteHandler(event:FlexEvent):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				stage.addEventListener(ResizeEvent.RESIZE, stageOrientationChangingHandler);
				// setup a custom orientation calculator based on the accelerometer because the default one doesn't work
				//_orientationCalc = new OrientationCalculator(pagesNavigatorView, accelerometerCallback);
				//_orientationCalc.active = true;
				//currentOrientation = _orientationCalc.currentOrientation;
			}
			
			private function stageOrientationChangingHandler(e:Event):void {
				profileBtn.navigateTo = isTabletLandscape() ? [PagesENUM.SPLITSETTINGS] : [PagesENUM.PROFILE];
			}
			
			private function accelerometerCallback():void {
				trace("++ accelerometer callback");
				stage.setOrientation(_orientationCalc.currentOrientation);
				stage.dispatchEvent(new StageOrientationEvent(StageOrientationEvent.ORIENTATION_CHANGE, true, true, currentOrientation, _orientationCalc.currentOrientation));
				currentOrientation = _orientationCalc.currentOrientation;
				(pagesNavigatorView.activeView as NoTabView).rotationHandler(_orientationCalc.currentOrientation);
			}
			
			public function isTabletLandscape():Boolean {
				var landscape:Boolean = (this.width > this.height);
				var tablet:Boolean = ((Math.max(this.width, this.height) / Capabilities.screenDPI) >= 7)
				return landscape && tablet;
			}
		]]>
	</fx:Script>

	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>

	<loading:LoadingScreen width="100%"
						   height="100%" />

	<s:Group width="100%"
			 height="100%"
			 id="mainshell"
			 visible="false">
		<s:layout>
			<s:VerticalLayout gap="0" />
		</s:layout>
		<s:SkinnableContainer id="topActionBar"
							  width="100%"
							  height="{getStyle('toolBarHeight')}"
							  styleName="topToolBarStyle"
							  verticalCenter="0">
			<s:HGroup width="100%"
					  height="100%">
				<s:Group>
					<ui:NavigationButton id="profileBtn"
										 styleName="profileButtonStyle topButtonStyle"
										 navigateTo="{isTabletLandscape() ? [PagesENUM.SPLITSETTINGS] : [PagesENUM.PROFILE]}"
										 transitionAnimation="{TransitionAnimationENUM.SLIDE_LEFT}" />
					<ui:NavigationButton id="backBtn"
										 styleName="backButtonStyle topButtonStyle"
										 navigateTo="{[PagesENUM.LAST]}"
										 transitionAnimation="{TransitionAnimationENUM.SLIDE_RIGHT}" />
				</s:Group>
				<s:Label id="pageName"
						 styleName="pageNameStyle"
						 width="100%"
						 height="100%" />
				<ui:RecordingStatus id="recordingStatus"
									styleName="recordingStatusIconStyle topButtonStyle"
									visible="false" />
				<videobutton:VideoButton id="videoBtn"
										 styleName="videoButtonStyle topButtonStyle" />
				<micbutton:MicButton id="microphoneBtn"
									 styleName="micButtonStyle topButtonStyle" />
			</s:HGroup>
		</s:SkinnableContainer>

		<navigation:PagesNavigatorView id="pagesNavigatorView"
									   width="100%"
									   height="100%" />
		<common:MenuButtonsView id="bottomMenu"
								width="100%"
								height="{getStyle('bottomToolBarHeight')}" />
	</s:Group>
	<!--
	<s:TextArea id="txtLog" width="100%" height="200">
		
	</s:TextArea>
	-->
</s:Application>
